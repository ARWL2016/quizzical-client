{"version":3,"sources":["components/QuizTitle/QuizTitle.js","core/utils.js","environment.js","data/quiz-data.js","containers/QuizList/QuizList.js","data/attempt-data.js","components/Question/Question.js","components/Backdrop/Backdrop.js","components/Modal/Modal.js","containers/Quiz/Quiz.js","containers/QuizHeader/QuizHeader.js","containers/QuizForm/QuizForm.js","core/TopNav/TopNav.js","components/Card/Card.js","containers/Result/Result.js","core/Layout/Layout.js","App.js","registerServiceWorker.js","index.js"],"names":["quiztitle","props","className","onClick","click","title","shuffle","array","sort","Math","random","server","process","getAll","a","axios","get","response","data","quizzes","console","error","getQuizById","id","quiz","getQuizQuestions","questions","forEach","q","optionKeys","Object","keys","options","sequence","postQuiz","post","QuizList","state","quizTitles","titleClickHandler","e","history","push","pathname","quizList","map","quiz_id","this","setState","key","Component","getAttemptReport","report","postAttempt","payload","result","question","text","question_number","question_id","optionIdSelected","optionId","type","value","onChange","clickHandler","checked","htmlFor","backdrop","show","clicked","Modal","nextProps","nextState","children","Fragment","style","transform","opacity","Quiz","selectedQuestion","answers","count","showModal","invalidMessage","questionId","nextHandler","iteration","newCount","checkHandler","checkValidity","user_id","attempt_id","handleModalClick","isValid","match","params","quizQuestions","isLast","length","disabled","renderSaveButton","QuizHeader","backHandler","startQuizHandler","QuizForm","quizTitle","addQuestion","next","number","correctAnswer","handleTitleChange","event","target","handleQuestionChange","questionNumber","fieldName","handleOptionChange","optionIndex","option","idx","handleAddQuestion","preventDefault","handleRemoveQuestion","filter","handleFormSubmit","onSubmit","name","placeholder","required","ev","topnav","to","card","header","body","Result","attempt","errors","results","r","option_selected","correct_option","score","num_questions","renderErrors","quiz_title","LayoutContainer","path","component","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71652e23.chunk.js","sourcesContent":["import React from 'react';\r\nimport './QuizTitle.scss';\r\n\r\n/**\r\n *  used by: QuizList\r\n */\r\n\r\nconst quiztitle = (props) => {\r\n    return <div className=\"quiz-title\" onClick={props.click}>{props.title}</div>\r\n}\r\n\r\nexport default quiztitle;","export function shuffle (array) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n}","export const server = process.env.REACT_APP_API_URI;","import axios from 'axios';\r\nimport { shuffle } from 'core/utils';\r\nimport { server } from '../environment';\r\n\r\nasync function getAll() {\r\n    try {\r\n        const response = await axios.get(`${server}/quiz`);\r\n        return response.data.data.quizzes;\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n}\r\n\r\nasync function getQuizById(id) {\r\n    try {\r\n        const response = await axios.get(`${server}/quiz/${id}`);\r\n        return response.data.data.quiz;\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n}\r\n\r\nasync function getQuizQuestions(id) {\r\n  try {\r\n      const response = await axios.get(`${server}/quiz/${id}/questions`);\r\n\r\n\r\n      const {quiz, questions } = response.data.data;\r\n\r\n      questions.forEach(q => {\r\n        const optionKeys = Object.keys(q.options);\r\n        q.sequence = shuffle(optionKeys);\r\n      })\r\n\r\n      return {quiz, questions};\r\n\r\n\r\n\r\n      // return response.data.data;\r\n\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n}\r\n\r\nasync function postQuiz(quiz) {\r\n  try {\r\n    const response = await axios.post(`${server}/quiz`, quiz);\r\n    return response.data.data;\r\n\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport {\r\n    getAll, getQuizById, getQuizQuestions, postQuiz\r\n}","import React, { Component } from 'react';\r\nimport QuizTitle from 'components/QuizTitle/QuizTitle';\r\nimport { getAll } from 'data/quiz-data';\r\n\r\n\r\nclass QuizList extends Component {\r\n    state = {\r\n        quizTitles: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const quizList = await getAll();\r\n\r\n        if (quizList) {\r\n            const quizTitles = quizList.map(quiz => ({ id: quiz.quiz_id, title: quiz.title }));\r\n            this.setState({ quizTitles });\r\n        }\r\n\r\n    }\r\n\r\n    titleClickHandler = (e, title) => {\r\n        this.props.history.push({ pathname: \"/info/\" + title.id });\r\n    }\r\n\r\n    render() {\r\n        const { quizTitles } = this.state;\r\n\r\n        return (\r\n            <div className=\"QuizList\">\r\n                {quizTitles.map(title => {\r\n                    return <QuizTitle key={title.id} click={() => this.titleClickHandler(null, title)} title={title.title} />\r\n                })}\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default QuizList;\r\n\r\n\r\n\r\n","import axios from 'axios';\r\nimport { server } from '../environment';\r\n\r\nasync function getAttemptReport(id) {\r\n    try {\r\n        const response = await axios.get(`${server}/attempt/${id}/report`);\r\n\r\n\r\n        return response.data.data.report;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nasync function postAttempt(payload) {\r\n    try {\r\n        const response = await axios.post(`${server}/attempt`, payload);\r\n\r\n        return response.data.data.result;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {\r\n    postAttempt, getAttemptReport\r\n}","import React from 'react';\r\nimport './Question.scss';\r\n\r\n// renders into Quiz\r\n\r\nconst question = (props) => {\r\n\r\n    const { options, text, question_number, question_id, optionIdSelected, sequence } = props;\r\n\r\n    const renderAnswers = () => {\r\n        return sequence.map(optionId => {\r\n            return (\r\n                <div key={optionId}>\r\n                    <input type=\"radio\" id={optionId} value={options[optionId]} onChange={() => props.clickHandler(question_id, optionId)} checked={optionId === optionIdSelected}></input>\r\n                    <label htmlFor={optionId}>{options[optionId]}</label>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form className=\"question\">\r\n            <p>{question_number}. {text}</p>\r\n            {renderAnswers()}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default question;","import React from 'react';\r\nimport './Backdrop.scss';\r\n\r\nconst backdrop = (props) => (\r\n    props.show ? <div className=\"backdrop\" onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\n\r\nimport './Modal.scss';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nclass Modal extends Component {\r\n\r\n    shouldComponentUpdate ( nextProps, nextState ) {\r\n        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <Backdrop show={this.props.show} clicked={this.props.clicked} />\r\n                <div\r\n                    className=\"modal\"\r\n                    style={{\r\n                        transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                        opacity: this.props.show ? '1' : '0'\r\n                    }}>\r\n                    {this.props.children}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\n\r\nimport { getQuizQuestions } from 'data/quiz-data';\r\nimport { postAttempt } from 'data/attempt-data';\r\nimport Question from 'components/Question/Question';\r\nimport Modal from 'components/Modal/Modal';\r\nimport './Quiz.scss';\r\n\r\nclass Quiz extends Component {\r\n\r\n    quiz = {};\r\n    questions = [];\r\n\r\n    state = {\r\n        selectedQuestion: null,\r\n        answers: {},\r\n        count: 0,\r\n        showModal: false,\r\n        invalidMessage: 'Please complete all questions'\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const quizQuestions = await getQuizQuestions(this.props.match.params.id);\r\n\r\n        if (quizQuestions) {\r\n            this.quiz = quizQuestions.quiz;\r\n            this.questions = quizQuestions.questions;\r\n\r\n            const answers = {};\r\n\r\n            this.questions.forEach(q => {\r\n                answers[q.question_id] = null\r\n            });\r\n\r\n            this.setState({\r\n                selectedQuestion: this.questions[0],\r\n                answers: answers,\r\n                count: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    clickHandler = (questionId, optionId) => {\r\n        this.setState((state) => {\r\n            return {\r\n                answers: {\r\n                    ...state.answers,\r\n                    [questionId]: optionId\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    nextHandler = (iteration) => {\r\n        this.setState((state) => {\r\n            let newCount = state.count + iteration;\r\n\r\n            return {\r\n                selectedQuestion: this.questions[newCount],\r\n                answers: { ...state.answers },\r\n                count: newCount\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    checkHandler = async () => {\r\n        if (this.checkValidity()) {\r\n            const payload = {\r\n                answers: this.state.answers,\r\n                quiz_id: this.quiz.quiz_id,\r\n                user_id: this.quiz.user_id\r\n            }\r\n\r\n            const result = await postAttempt(payload);\r\n\r\n            if (result) {\r\n                this.props.history.push(`/result/${result.attempt_id}`);\r\n            }\r\n\r\n        } else {\r\n            this.setState({ showModal: true });\r\n        }\r\n    }\r\n\r\n    handleModalClick = () => {\r\n        this.setState({ showModal: false })\r\n    }\r\n\r\n    checkValidity = () => {\r\n        let isValid = true;\r\n        const { answers } = this.state;\r\n\r\n        Object.keys(answers).forEach(key => {\r\n            if (answers[key] === null) {\r\n                isValid = false;\r\n            }\r\n        });\r\n\r\n        return isValid;\r\n    }\r\n\r\n    renderSaveButton(isLast) {\r\n        if (!isLast) { return }\r\n        return (\r\n            <button className=\"next\" onClick={() => this.checkHandler()}>Check Answers</button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.selectedQuestion) { return <div /> }\r\n\r\n        const { selectedQuestion, count, answers } = this.state;\r\n        const isLast = count === this.questions.length - 1;\r\n        const optionIdSelected = answers ? answers[selectedQuestion.question_id] : null;\r\n\r\n        return (\r\n            <div className=\"quiz-container\">\r\n                <header>\r\n                    <h2>{this.quiz.title}</h2>\r\n                    <span>{count + 1} / {this.questions.length}</span>\r\n                </header>\r\n\r\n                <section>\r\n                    <div>\r\n                        <Question key={selectedQuestion.question_id} {...selectedQuestion} optionIdSelected={optionIdSelected} clickHandler={this.clickHandler}></Question>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"previous\" disabled={count === 0} onClick={() => this.nextHandler(-1)}>Previous</button>\r\n                        <button className=\"next\" disabled={isLast} onClick={() => this.nextHandler(1)}>Next</button>\r\n\r\n                        {this.renderSaveButton(isLast)}\r\n\r\n                    </div>\r\n\r\n                </section>\r\n                {/* {JSON.stringify(this.state)} */}\r\n\r\n                <Modal show={this.state.showModal} clicked={this.handleModalClick}>\r\n                    {this.state.invalidMessage}\r\n                </Modal>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz;\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport { getQuizById } from '../../data/quiz-data';\r\nimport './QuizHeader.scss';\r\n\r\nclass QuizHeader extends Component {\r\n    state = {\r\n        quiz: {}\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const id = +this.props.match.params.id;\r\n\r\n        const quiz = await getQuizById(id);\r\n\r\n        if (quiz) {\r\n            this.setState({quiz})\r\n        }\r\n    }\r\n\r\n    backHandler = () => {\r\n        this.props.history.push(\"/home\");\r\n    }\r\n\r\n    startQuizHandler = () => {\r\n        this.props.history.push(\"/quiz/\" + this.state.quiz.quiz_id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"quiz-header\">\r\n                <h1>{this.state.quiz.title}</h1>\r\n                <button onClick={this.backHandler}>Back to Quiz List</button>\r\n                <button onClick={this.startQuizHandler}>Start Quiz</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizHeader;\r\n","import React, { Component } from 'react';\r\nimport './QuizForm.scss';\r\nimport { postQuiz } from 'data/quiz-data';\r\n\r\nclass QuizForm extends Component {\r\n\r\n    state = {\r\n        quizTitle: '',\r\n        questions: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.addQuestion();\r\n    }\r\n\r\n    addQuestion = () => {\r\n        const next = this.state.questions.length + 1;\r\n\r\n        this.setState(state => {\r\n            return {\r\n                questions: [\r\n                    ...state.questions,\r\n                    {\r\n                        number: next,\r\n                        text: '',\r\n                        correctAnswer: '',\r\n                        options: ['', '', '']\r\n                    }\r\n                ]\r\n            }\r\n        })\r\n    }\r\n\r\n    handleTitleChange = (event) => {\r\n        this.setState({ quizTitle: event.target.value });\r\n    }\r\n\r\n    handleQuestionChange = (event, questionNumber, fieldName) => {\r\n        const { value } = event.target;\r\n\r\n        this.setState(state => {\r\n            return {\r\n                questions: state.questions.map(question => {\r\n                    if (question.number === questionNumber) {\r\n                        return {\r\n                            ...question,\r\n                            [fieldName]: value,\r\n                        }\r\n                    } else {\r\n                        return question;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    handleOptionChange = (event, questionNumber, optionIndex) => {\r\n        const { value } = event.target;\r\n\r\n        this.setState(state => {\r\n            return {\r\n                questions: state.questions.map(question => {\r\n                    if (question.number === questionNumber) {\r\n                        return {\r\n                            ...question,\r\n                            options: question.options.map((option, idx) => {\r\n                                return (idx === optionIndex) ? value : option;\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return question;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    handleAddQuestion = (e) => {\r\n        e.preventDefault();\r\n        this.addQuestion();\r\n    }\r\n\r\n    handleRemoveQuestion = (event, questionNumber) => {\r\n        event.preventDefault();\r\n\r\n        this.setState(state => {\r\n            const newQuestions = state.questions.filter(q => q.number !== questionNumber).map((q, idx) => {\r\n                return {\r\n                    ...q,\r\n                    number: idx + 1\r\n                }\r\n            })\r\n\r\n            return {\r\n                questions: newQuestions\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const quiz = await postQuiz(this.state);\r\n\r\n        if (quiz) {\r\n            this.props.history.push(`/home`);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { quizTitle, questions } = this.state;\r\n\r\n        if (!questions) { return null }\r\n\r\n        return (\r\n\r\n            <form className=\"quiz-form-container\" onSubmit={this.handleFormSubmit}>\r\n                <div className=\"form-field-container\">\r\n                    <div className=\"form-field title-field\">\r\n                        <label htmlFor=\"quizTitle\">Quiz Title</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"quizTitle\"\r\n                            placeholder=\"add a snappy title\"\r\n                            value={quizTitle}\r\n                            onChange={this.handleTitleChange}\r\n                            required=\"required\"></input>\r\n                    </div>\r\n                    {questions.map((q, idx) => {\r\n                        return (\r\n                            <div key={idx} className=\"question-container\">\r\n                                <div className=\"form-field\" >\r\n                                    <label htmlFor={q.number}>Q{q.number}.</label>\r\n                                    <input\r\n                                        placeholder=\"add question text\"\r\n                                        type=\"text\"\r\n                                        name={q.number}\r\n                                        value={q.text}\r\n                                        onChange={(ev) => this.handleQuestionChange(ev, q.number, 'text')}\r\n                                        required=\"required\"\r\n                                    ></input>\r\n                                </div>\r\n\r\n                                <div className=\"answers-container\">\r\n                                    <div className=\"form-field\">\r\n                                        <label htmlFor=\"correctAnswer\">Answer</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"correct answer text\"\r\n                                            name=\"correctAnswer\"\r\n                                            value={q.correctAnswer}\r\n                                            onChange={(ev) => this.handleQuestionChange(ev, q.number, 'correctAnswer')}\r\n                                            required=\"required\"\r\n                                        ></input>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    {q.options.map((option, idx) => {\r\n                                        return (\r\n                                            <div key={idx}>\r\n                                                <div className=\"form-field\">\r\n                                                    <label htmlFor={option}>Option</label>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder={'alternative answer ' + (idx + 1)}\r\n                                                        name={option}\r\n                                                        value={option}\r\n                                                        onChange={(ev) => this.handleOptionChange(ev, q.number, idx)}\r\n                                                        required=\"required\"\r\n                                                    ></input>\r\n\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                {(questions.length < 2) ? null : (\r\n                                    <div className=\"question-button-container\">\r\n                                        <button className=\"remove-question-button\" onClick={(ev) => this.handleRemoveQuestion(ev, q.number)}>Remove Question</button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <div className=\"form-button-container\">\r\n                        <button className=\"add-question-button\" onClick={this.handleAddQuestion}>Add Question</button>\r\n                        <input type=\"submit\" value=\"Save Quiz\" />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </form>\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizForm;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './TopNav.scss';\r\n\r\nconst topnav = () => {\r\n    return (\r\n        <nav className=\"top-nav\">\r\n            <Link to=\"/home\">\r\n                <span className=\"logo\">quizzical?</span>\r\n            </Link>\r\n\r\n            <Link to=\"/add\">\r\n                <span className=\"menu-item\">Add Quiz</span>\r\n\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default topnav;","import React from 'react';\r\nimport './Card.scss';\r\n\r\nconst card = (props) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <header className=\"card-header\">\r\n                <h2>{props.header}</h2>\r\n\r\n\r\n            </header>\r\n            <section className=\"card-section\">\r\n                {props.body}\r\n                {props.children}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card;","import React, { Component } from 'react';\r\nimport { getAttemptReport } from 'data/attempt-data';\r\nimport Card from 'components/Card/Card';\r\nimport './Result.scss';\r\n\r\n// const temp = { \"attempt_id\": 29, \"quiz_id\": 4, \"user_id\": 1, \"datetime\": \"2020-04-27T09:33:37.926Z\", \"quiz_title\": \"Cities and Capitals\", \"results\": [{ \"question_id\": 1, \"text\": \"What is the capital of France?\", \"answer\": \"Lyon\", \"correct_answer\": \"Paris\", \"result\": false }, { \"question_id\": 2, \"text\": \"What is the capital of Germany?\", \"answer\": \"Berlin\", \"correct_answer\": \"Berlin\", \"result\": true }], \"num_questions\": \"2\", \"score\": \"1\" };\r\n\r\nexport default class Result extends Component {\r\n\r\n    state = {};\r\n\r\n    async componentDidMount() {\r\n        const id = +this.props.match.params.id;\r\n\r\n        const attempt = await getAttemptReport(id);\r\n        if (attempt) {\r\n            this.setState({ ...attempt });\r\n        }\r\n\r\n    }\r\n\r\n    renderErrors() {\r\n        const errors = this.state.results.filter(r => r.result === false);\r\n\r\n        if (errors.length) {\r\n            return (\r\n                <>\r\n                    <p>Here's what you got wrong...</p>\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>Your answer</th>\r\n                                <th>Correct answer</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {errors.map(e => {\r\n                                return (\r\n                                    <tr key={e.question_id}>\r\n                                        <td>{e.question_id}) {e.text}</td>\r\n                                        <td style={{ 'textAlign': 'center' }}>{e.option_selected}</td>\r\n                                        <td style={{ 'textAlign': 'center' }}>{e.correct_option}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderBody() {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"score\">You scored {this.state.score} out of {this.state.num_questions}</div>\r\n                {this.renderErrors()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.state && this.state.results) {\r\n            return (\r\n                <div className=\"result-container\">\r\n\r\n                    <Card className=\"result-container\"\r\n                        header={this.state.quiz_title}\r\n                        body={\r\n                            <>\r\n                                <div className=\"score\">You scored {this.state.score} out of {this.state.num_questions}</div>\r\n                                {this.renderErrors()}\r\n                            </>\r\n                        }></Card>\r\n                </div>\r\n            )\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}","// This container component will hold any top level state\r\n\r\nimport React, {Component} from 'react';\r\nimport {Route, Redirect, Switch} from 'react-router-dom';\r\n\r\nimport QuizList from 'containers/QuizList/QuizList';\r\nimport Quiz from 'containers/Quiz/Quiz';\r\nimport './Layout.scss';\r\nimport QuizHeader from 'containers/QuizHeader/QuizHeader';\r\nimport QuizForm from 'containers/QuizForm/QuizForm';\r\nimport TopNav from '../TopNav/TopNav';\r\nimport Result from 'containers/Result/Result';\r\n\r\nclass LayoutContainer extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LayoutContainer\">\r\n                <TopNav></TopNav>\r\n\r\n\r\n                <Switch>\r\n                    <Route path=\"/home\" component={QuizList} />\r\n                    <Route path=\"/info/:id\" component={QuizHeader} />\r\n                    <Route path=\"/quiz/:id\" component={Quiz} />\r\n                    <Route path=\"/result/:id\" component={Result} />\r\n                    <Route path=\"/add\" component={QuizForm} />\r\n\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LayoutContainer;\r\n","import React, { Component } from 'react';\nimport LayoutContainer from './core/Layout/Layout';\nimport './App.scss';\nimport { BrowserRouter } from 'react-router-dom';\n\nclass App extends Component {\n\n\n\n    render() {\n\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <LayoutContainer />\n\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { server } from './environment';\n\n\n\nconsole.log(`[quizzical-client] running in ${process.env.NODE_ENV} mode` );\nconsole.log(`[quizzical-client] connecting to API on ${server}` );\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}